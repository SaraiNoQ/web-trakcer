{"code":"import { TrackerConfig, MouseEventList } from \"../types/index\";\r\nimport { createHistoryEvent } from \"../utils/pv\";\r\nexport default class Tracker {\r\n    constructor(options) {\r\n        this.data = Object.assign(this.initDef(), options);\r\n        this.installTracker();\r\n    }\r\n    initDef() {\r\n        window.history['pushState'] = createHistoryEvent('pushState');\r\n        window.history['replaceState'] = createHistoryEvent('replaceState');\r\n        // window.history['back'] = createHistoryEvent('back')\r\n        return {\r\n            sdkVersion: TrackerConfig.version,\r\n            historyTracker: false,\r\n            hashTracker: false,\r\n            domTracker: false,\r\n            jsError: false\r\n        };\r\n    }\r\n    setUserId(id) {\r\n        this.data.uuid = id;\r\n    }\r\n    setExtra(extra) {\r\n        this.data.extra = extra;\r\n    }\r\n    /**\r\n     * 手动上报信息\r\n     * @type reportTrackerData 上传数据类型\r\n     */\r\n    sendTracker(data) {\r\n        this.reportTracker(data);\r\n    }\r\n    saveTracker(data) {\r\n        const trackerData = localStorage.getItem('tracker') || undefined;\r\n        if (trackerData) {\r\n            try {\r\n                let arr = JSON.parse(trackerData);\r\n                arr = [...arr, data];\r\n                localStorage.setItem('tracker', JSON.stringify(arr));\r\n            }\r\n            catch (error) {\r\n                console.error('sdk saveTracker error!', error);\r\n            }\r\n        }\r\n        else {\r\n            localStorage.setItem('tracker', JSON.stringify([data]));\r\n        }\r\n    }\r\n    /**\r\n     * 上报信息到后台\r\n     */\r\n    reportTracker(data) {\r\n        const params = Object.assign(this.data, data, { time: new Date().getTime() });\r\n        let headers = {\r\n            type: 'application/x-www-form-urlencoded'\r\n        };\r\n        let blob = new Blob([JSON.stringify(params)], headers);\r\n        navigator.sendBeacon(this.data.requestUrl, blob);\r\n    }\r\n    /**\r\n     * 上报DOM点击事件\r\n     */\r\n    reportDomTracker() {\r\n        MouseEventList.forEach(event => {\r\n            window.addEventListener(event, e => {\r\n                const target = e.target;\r\n                const targetKey = target.getAttribute('data-tracker-key');\r\n                if (targetKey) {\r\n                    this.sendTracker({\r\n                        event,\r\n                        targetKey,\r\n                        clickData: {\r\n                            x: e.clientX,\r\n                            y: e.clientY\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * js错误\r\n     */\r\n    jsError() {\r\n        this.jsErrorEvent();\r\n        this.promiseErrorEvent();\r\n    }\r\n    /**\r\n     * 捕获js错误\r\n     */\r\n    jsErrorEvent() {\r\n        window.addEventListener('error', e => {\r\n            this.sendTracker({\r\n                event: 'js-error',\r\n                targetKey: 'js-error',\r\n                data: {\r\n                    message: e.message,\r\n                    filename: e.filename,\r\n                    lineno: e.lineno,\r\n                    colno: e.colno\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * 捕获Promise错误\r\n     */\r\n    promiseErrorEvent() {\r\n        window.addEventListener('unhandledrejection', e => {\r\n            e.promise.catch(err => {\r\n                this.sendTracker({\r\n                    event: 'promise-error',\r\n                    targetKey: 'promise-error',\r\n                    data: {\r\n                        message: e.reason.message,\r\n                        filename: e.reason.stack.split('\\n')[0],\r\n                        err: err\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * 监听器函数\r\n     * @param mouseEventList 触发事件\r\n     * @param targetKey 后台枚举值\r\n     * @param data 其他数据\r\n     */\r\n    captureEvents(mouseEventList, targetKey, data) {\r\n        mouseEventList.forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                console.log('监听到事件:', event);\r\n                this.reportTracker({\r\n                    event,\r\n                    targetKey,\r\n                    data\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * 安装监听器\r\n     */\r\n    installTracker() {\r\n        if (this.data.historyTracker) {\r\n            this.captureEvents(['pushState', 'replaceState', 'popstate'], 'history-pv');\r\n        }\r\n        if (this.data.hashTracker) {\r\n            this.captureEvents(['hashchange'], 'hash-pv');\r\n        }\r\n        if (this.data.domTracker) {\r\n            this.reportDomTracker();\r\n        }\r\n        if (this.data.jsError) {\r\n            this.jsError();\r\n        }\r\n    }\r\n}\r\n","references":["D:/GitHub/project/webpack_stu/rollup/src/types/index.ts","D:/GitHub/project/webpack_stu/rollup/src/utils/pv.ts"]}
